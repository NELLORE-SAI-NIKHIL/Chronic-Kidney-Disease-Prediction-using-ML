# -*- coding: utf-8 -*-
"""Chronic Kidney Disease Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LbXfVzUPbqg5mzMrf-ojjdjBCJBjju-x
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

df = pd.read_csv('/content/kidney_disease.csv')
df.head()

df.info()

df.drop('id', axis = 1, inplace = True)
df.head()

df.columns  = ['age','blood_pressure', 'specific_gravity', 'albumin', 'sugar', 'red_blood_cells', 'pus_cell', 'pus_cell_clumps', 'bacteria',
               'blood_glucose_random', 'blood_urea', 'serum_creatinine', 'sodium', 'potassium', 'hemoglobin', 'packed_cell_volume',
               'white_blood_cell_count', 'red_blood_cell_count', 'hypertension', 'diabetes_mellitus', 'coronary_artery_disease', 'appetite',
               'pedal_edema', 'anemia', 'class']

df.info()

"""**DATATYPE CONVERSION**"""

df[['specific_gravity','albumin','sugar']] = df[['specific_gravity','albumin','sugar']].astype(object)

df['packed_cell_volume'] = pd.to_numeric(df['packed_cell_volume'], errors = 'coerce')
df['white_blood_cell_count'] = pd.to_numeric(df['white_blood_cell_count'], errors = 'coerce')
df['red_blood_cell_count'] = pd.to_numeric(df['red_blood_cell_count'], errors = 'coerce')

cat_cols = df.select_dtypes(include = 'object').columns.tolist()
num_cols = df.select_dtypes(include = 'number').columns.tolist()

print("Categorical Columns: ", cat_cols)
print("\nNumerical Columns: ", num_cols)

"""**Unique values in each column of a dataset**"""

for col in cat_cols:
  print(col, ":\n", df[col].unique())
  print()

"""**Mistake Correction**"""

df['diabetes_mellitus'] = df['diabetes_mellitus'].replace({' yes' : 'yes', '\tno':'no', '\tyes':'no'})
df['coronary_artery_disease'] = df['coronary_artery_disease'].replace({'\tno':'no'})

df['class'] = df['class'].replace({'ckd\t':'ckd'})

"""**Encoding Target CLass**"""

df['class'] = df['class'].replace({'ckd':0, 'notckd':1})
df[['class']] = df[['class']].astype(object)

"""**AUTO EDA**"""

pip install dataprep

import dataprep.eda as eda

report = eda.create_report(df)
report.show()

"""**Exploratory Data Analysis**"""

plt.figure(figsize=(20,10))
for col in num_cols:
  sns.displot(df[col], kind='kde')
  plt.show()

for col in cat_cols:
  sns.countplot(data = df, x = col)
  plt.xlabel(col)
  plt.show()

corr = df.corr()

plt.figure(figsize=(15, 8))
heatmap = sns.heatmap(corr, annot=True, cmap='coolwarm', center=0)

plt.title('Correlation Heatmap')
plt.show()

"""**Check for Null Values**"""

df.isnull().sum()

df[cat_cols].isnull().sum()

df[num_cols].isnull().sum()

"""**Fill the missing values**"""

def random_sampling(df,col):
  non_null_values = df[col].dropna().values
  r_samples = np.random.choice(non_null_values, size=df[col].isnull().sum(), replace=True)
  df.loc[df[col].isnull(), col] = r_samples
  return df

def fill_using_mode(df, col):
  mode = df[col].mode()[0]
  df[col] = df[col].fillna(mode)
  return df

for col in num_cols:
  df = random_sampling(df, col)

df[num_cols].isnull().sum()

df = random_sampling(df, 'red_blood_cells')
df = random_sampling(df, 'pus_cell')

for col in cat_cols:
  if col != 'red_blood_cells' and col != 'pus_cell':
    df = fill_using_mode(df, col)

df[cat_cols].isnull().sum()

for col in cat_cols:
  print(col, ":\n", df[col].unique())
  print()

"""**Encoding**"""

le = LabelEncoder()
for col in cat_cols[3:]:
  df[col] = le.fit_transform(df[col])

df.head()

"""**Splitting data into Training data and Testing data**"""

x = df.drop('class', axis = 1)
y = df['class']

x.head()

y.head()

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.30, random_state = 0)

"""**Model Building**

**(i) KNN CLASSIFIER**
"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

knn = KNeighborsClassifier()
knn.fit(x_train, y_train)

y_knn_test_pred = knn.predict(x_test)
knn_test_acc = accuracy_score(y_test, y_knn_test_pred)

y_knn_train_pred = knn.predict(x_train)
knn_train_acc = accuracy_score(y_train, y_knn_train_pred)

print("KNN Training Accuracy: ", knn_train_acc)
print("KNN Testing Accuracy: ", knn_test_acc)
print()

confusion_mat = confusion_matrix(y_test, y_knn_test_pred)
print("Confusion Matrix: \n", confusion_mat)
print()

knn_report = classification_report(y_test, y_knn_test_pred)
print("Classification Report:\n", knn_report)

from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

knn = KNeighborsClassifier()
knn.fit(x_train, y_train)

y_knn_test_pred = knn.predict(x_test)
scale_knn_test_acc = accuracy_score(y_test, y_knn_test_pred)

y_knn_train_pred = knn.predict(x_train)
scale_knn_train_acc = accuracy_score(y_train, y_knn_train_pred)

print("KNN Training Accuracy: ", scale_knn_train_acc)
print("KNN Testing Accuracy: ", scale_knn_test_acc)
print()

confusion_mat = confusion_matrix(y_test, y_knn_test_pred)
print("Confusion Matrix: \n", confusion_mat)
print()

scale_knn_report = classification_report(y_test, y_knn_test_pred)
print("Classification Report:\n", scale_knn_report)

"""**(ii) Decision Tree Classifier**"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

dtc = DecisionTreeClassifier()
dtc.fit(x_train, y_train)

y_dtc_test_pred = dtc.predict(x_test)
dtc_test_acc = accuracy_score(y_test, y_dtc_test_pred)

y_dtc_train_pred = dtc.predict(x_train)
dtc_train_acc = accuracy_score(y_train, y_dtc_train_pred)

print("Decsion Tree Classifier Training Accuracy: ", dtc_train_acc)
print("Decsion Tree Classifier Testing Accuracy: ", dtc_test_acc)
print()

confusion_mat = confusion_matrix(y_test, y_dtc_test_pred)
print("Confusion Matrix: \n", confusion_mat)
print()

dtc_report = classification_report(y_test, y_dtc_test_pred)
print("Classification Report:\n", dtc_report)

"""**Hyper Parameter Tuning For DTC**"""

from sklearn.model_selection import GridSearchCV

grid_param = {
                'criterion' : ['gini', 'entropy'],
                'max_depth' : [3,5,7,10],
                'splitter' : ['best', 'random'],
                'min_samples_split' : [1,2,3,5,7],
                'min_samples_leaf' : [1,2,3,5,7],
                'max_features' : ['auto', 'sqrt', 'log2']
            }

grid_search_dtc = GridSearchCV(estimator = dtc, param_grid = grid_param, cv = 5, n_jobs = -1, verbose = 1)
grid_search_dtc.fit(x_train, y_train)

print(grid_search_dtc.best_params_)
print(grid_search_dtc.best_score_)

dtc = grid_search_dtc.best_estimator_

dtc.fit(x_train, y_train)

y_dtc_test_pred = dtc.predict(x_test)
dtc_test_acc = accuracy_score(y_test, y_dtc_test_pred)

y_dtc_train_pred = dtc.predict(x_train)
dtc_train_acc = accuracy_score(y_train, y_dtc_train_pred)

print("Decsion Tree Classifier Training Accuracy: ", dtc_train_acc)
print("Decsion Tree Classifier Testing Accuracy: ", dtc_test_acc)
print()

confusion_mat = confusion_matrix(y_test, y_dtc_test_pred)
print("Confusion Matrix: \n", confusion_mat)
print()

dtc_report = classification_report(y_test, y_dtc_test_pred)
print("Classification Report:\n", dtc_report)

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

dtc = grid_search_dtc.best_estimator_

dtc.fit(x_train, y_train)

y_dtc_test_pred = dtc.predict(x_test)
scale_dtc_test_acc = accuracy_score(y_test, y_dtc_test_pred)

y_dtc_train_pred = dtc.predict(x_train)
scale_dtc_train_acc = accuracy_score(y_train, y_dtc_train_pred)

print("Decsion Tree Classifier Training Accuracy: ", scale_dtc_train_acc)
print("Decsion Tree Classifier Testing Accuracy: ", scale_dtc_test_acc)
print()

confusion_mat = confusion_matrix(y_test, y_dtc_test_pred)
print("Confusion Matrix: \n", confusion_mat)
print()

scale_dtc_report = classification_report(y_test, y_dtc_test_pred)
print("Classification Report:\n", scale_dtc_report)

"""**(iii) Random Forest Classifier**"""

from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier(criterion = 'entropy', max_depth = 11, max_features = 'auto', min_samples_leaf = 2, min_samples_split = 3,
                             n_estimators=130)

rfc.fit(x_train, y_train)

y_rfc_test_pred = rfc.predict(x_test)
rfc_test_acc = accuracy_score(y_test, y_rfc_test_pred)

y_rfc_train_pred = rfc.predict(x_train)
rfc_train_acc = accuracy_score(y_train, y_rfc_train_pred)

print("Random Forest Classifier Training Accuracy: ", rfc_train_acc)
print("Random Forest Classifier Testing Accuracy: ", rfc_test_acc)
print()

confusion_mat = confusion_matrix(y_test, y_rfc_test_pred)
print("Confusion Matrix: \n", confusion_mat)
print()

rfc_report = classification_report(y_test, y_rfc_test_pred)
print("Classification Report:\n", rfc_report)

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

rfc = RandomForestClassifier(criterion = 'entropy', max_depth = 11, max_features = 'auto', min_samples_leaf = 2, min_samples_split = 3,
                             n_estimators=130)

rfc.fit(x_train, y_train)

y_rfc_test_pred = rfc.predict(x_test)
scale_rfc_test_acc = accuracy_score(y_test, y_rfc_test_pred)

y_rfc_train_pred = rfc.predict(x_train)
scale_rfc_train_acc = accuracy_score(y_train, y_rfc_train_pred)

print("Random Forest Classifier Training Accuracy: ", scale_rfc_train_acc)
print("Random Forest Classifier Testing Accuracy: ", scale_rfc_test_acc)
print()

confusion_mat = confusion_matrix(y_test, y_rfc_test_pred)
print("Confusion Matrix: \n", confusion_mat)
print()

scale_rfc_report = classification_report(y_test, y_rfc_test_pred)
print("Classification Report:\n", scale_rfc_report)

"""**(iv) AdaBoost Classifier**"""

from sklearn.ensemble import AdaBoostClassifier

dtc = grid_search_dtc.best_estimator_

ada = AdaBoostClassifier(base_estimator = dtc)
ada.fit(x_train,y_train)

y_ada_test_pred = ada.predict(x_test)
ada_test_acc = accuracy_score(y_test, y_ada_test_pred)

y_ada_train_pred = ada.predict(x_train)
ada_train_acc = accuracy_score(y_train, y_ada_train_pred)

print("AdaBoost Classifier Training Accuracy: ", ada_train_acc)
print("AdaBoost Classifier Testing Accuracy: ", ada_test_acc)
print()

confusion_mat = confusion_matrix(y_test, y_ada_test_pred)
print("Confusion Matrix: \n", confusion_mat)
print()

ada_report = classification_report(y_test, y_ada_test_pred)
print("Classification Report:\n", ada_report)

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

dtc = grid_search_dtc.best_estimator_

ada = AdaBoostClassifier(base_estimator = dtc)
ada.fit(x_train,y_train)

y_ada_test_pred = ada.predict(x_test)
scale_ada_test_acc = accuracy_score(y_test, y_ada_test_pred)

y_ada_train_pred = ada.predict(x_train)
scale_ada_train_acc = accuracy_score(y_train, y_ada_train_pred)

print("AdaBoost Classifier Training Accuracy: ", scale_ada_train_acc)
print("AdaBoost Classifier Testing Accuracy: ", scale_ada_test_acc)
print()

confusion_mat = confusion_matrix(y_test, y_ada_test_pred)
print("Confusion Matrix: \n", confusion_mat)
print()

scale_ada_report = classification_report(y_test, y_ada_test_pred)
print("Classification Report:\n", scale_ada_report)

"""**(v) GradientBoost Classifier**"""

from sklearn.ensemble import GradientBoostingClassifier

gbc = GradientBoostingClassifier()
gbc.fit(x_train, y_train)

y_gbc_test_pred = gbc.predict(x_test)
gbc_test_acc = accuracy_score(y_test, y_gbc_test_pred)

y_gbc_train_pred = gbc.predict(x_train)
gbc_train_acc = accuracy_score(y_train, y_gbc_train_pred)

print("GradientBoost Classifier Training Accuracy: ", gbc_train_acc)
print("GradientBoost Classifier Testing Accuracy: ", gbc_test_acc)
print()

confusion_mat = confusion_matrix(y_test, y_gbc_test_pred)
print("Confusion Matrix: \n", confusion_mat)
print()

gbc_report = classification_report(y_test, y_gbc_test_pred)
print("Classification Report:\n", gbc_report)

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

gbc = GradientBoostingClassifier()
gbc.fit(x_train, y_train)

y_gbc_test_pred = gbc.predict(x_test)
scale_gbc_test_acc = accuracy_score(y_test, y_gbc_test_pred)

y_gbc_train_pred = gbc.predict(x_train)
scale_gbc_train_acc = accuracy_score(y_train, y_gbc_train_pred)

print("GradientBoost Classifier Training Accuracy with scaled data: ", scale_gbc_train_acc)
print("GradientBoost Classifier Testing Accuracy with scaled data: ", scale_gbc_test_acc)
print()

confusion_mat = confusion_matrix(y_test, y_gbc_test_pred)
print("Confusion Matrix: \n", confusion_mat)
print()

scale_gbc_report = classification_report(y_test, y_gbc_test_pred)
print("Classification Report:\n", scale_gbc_report)

"""**(vi) XGB Classifier**"""

from xgboost import XGBClassifier

xgb = XGBClassifier(objective = 'binary:logistic', learning_rate = 0.5, max_depth = 5, n_estimators = 150)
xgb.fit(x_train, y_train)

y_xgb_test_pred = xgb.predict(x_test)
xgb_test_acc = accuracy_score(y_test, y_xgb_test_pred)

y_xgb_train_pred = xgb.predict(x_train)
xgb_train_acc = accuracy_score(y_train, y_xgb_train_pred)

print("XGBoost Classifier Training Accuracy: ", xgb_train_acc)
print("XGBoost Classifier Testing Accuracy: ", xgb_test_acc)
print()

confusion_mat = confusion_matrix(y_test, y_xgb_test_pred)
print("Confusion Matrix: \n", confusion_mat)
print()

xgb_report = classification_report(y_test, y_gbc_test_pred)
print("Classification Report:\n", xgb_report)

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

xgb = XGBClassifier(objective = 'binary:logistic', learning_rate = 0.5, max_depth = 5, n_estimators = 150)
xgb.fit(x_train, y_train)

y_xgb_test_pred = xgb.predict(x_test)
scale_xgb_test_acc = accuracy_score(y_test, y_xgb_test_pred)

y_xgb_train_pred = xgb.predict(x_train)
scale_xgb_train_acc = accuracy_score(y_train, y_xgb_train_pred)

print("XGBoost Classifier Training Accuracy with scaled data: ", scale_xgb_train_acc)
print("XGBoost Classifier Testing Accuracy with scaled data: ", scale_xgb_test_acc)
print()

confusion_mat = confusion_matrix(y_test, y_xgb_test_pred)
print("Confusion Matrix: \n", confusion_mat)
print()

scale_xgb_report = classification_report(y_test, y_gbc_test_pred)
print("Classification Report:\n", scale_xgb_report)

"""**(vii) CatBoost Classifier**"""

pip install catboost

from catboost import CatBoostClassifier

cat = CatBoostClassifier()
cat.fit(x_train, y_train)

y_cat_test_pred = cat.predict(x_test)
cat_test_acc = accuracy_score(y_test, y_cat_test_pred)

y_cat_train_pred = cat.predict(x_train)
cat_train_acc = accuracy_score(y_train, y_cat_train_pred)

print("CatBoost Classifier Training Accuracy: ", cat_train_acc)
print("CatBoost Classifier Testing Accuracy: ", cat_test_acc)
print()

confusion_mat = confusion_matrix(y_test, y_cat_test_pred)
print("Confusion Matrix: \n", confusion_mat)
print()

cat_report = classification_report(y_test, y_cat_test_pred)
print("Classification Report:\n", cat_report)

"""**(viii) LGBM Classifier**"""

from lightgbm import LGBMClassifier

lgbm = LGBMClassifier(learning_rate = 1.0)
lgbm.fit(x_train, y_train)

y_lgbm_test_pred = lgbm.predict(x_test)
lgbm_test_acc = accuracy_score(y_test, y_lgbm_test_pred)

y_lgbm_train_pred = lgbm.predict(x_train)
lgbm_train_acc = accuracy_score(y_train, y_lgbm_train_pred)

print("LGBM Classifier Training Accuracy: ", lgbm_train_acc)
print("LGBM Classifier Testing Accuracy: ", lgbm_test_acc)
print()

confusion_mat = confusion_matrix(y_test, y_lgbm_test_pred)
print("Confusion Matrix: \n", confusion_mat)
print()

lgbm_report = classification_report(y_test, y_lgbm_test_pred)
print("Classification Report:\n", lgbm_report)

print("KNN Training Accuracy: ", knn_train_acc)
print("KNN Testing Accuracy: ", knn_test_acc)
print()
print("KNN Training Accuracy with scaled data: ", scale_knn_train_acc)
print("KNN Testing Accuracy with scaled data: ", scale_knn_test_acc)
print()
print("Decsion Tree Classifier Training Accuracy: ", dtc_train_acc)
print("Decsion Tree Classifier Testing Accuracy: ", dtc_test_acc)
print()
print("Decsion Tree Classifier Training Accuracy with scaled data: ", scale_dtc_train_acc)
print("Decsion Tree Classifier Testing Accuracy with scaled data: ", scale_dtc_test_acc)
print()
print("Random Forest Classifier Training Accuracy: ", rfc_train_acc)
print("Random Forest Classifier Testing Accuracy: ", rfc_test_acc)
print()
print("Random Forest Classifier Training Accuracy with scaled data: ", scale_rfc_train_acc)
print("Random Forest Classifier Testing Accuracy with scaled data: ", scale_rfc_test_acc)
print()
print("AdaBoost Classifier Training Accuracy: ", ada_train_acc)
print("AdaBoost Classifier Testing Accuracy: ", ada_test_acc)
print()
print("AdaBoost Classifier Training Accuracy with scaled data: ", scale_ada_train_acc)
print("AdaBoost Classifier Testing Accuracy with scaled data: ", scale_ada_test_acc)
print()
print("GradientBoost Classifier Training Accuracy: ", gbc_train_acc)
print("GradientBoost Classifier Testing Accuracy: ", gbc_test_acc)
print()
print("GradientBoost Classifier Training Accuracy with scaled data: ", scale_gbc_train_acc)
print("GradientBoost Classifier Testing Accuracy with scaled data: ", scale_gbc_test_acc)
print()
print("XGBoost Classifier Training Accuracy: ", xgb_train_acc)
print("XGBoost Classifier Testing Accuracy: ", xgb_test_acc)
print()
print("XGBoost Classifier Training Accuracy with scaled data: ", scale_xgb_train_acc)
print("XGBoost Classifier Testing Accuracy with scaled data: ", scale_xgb_test_acc)
print()
print("CatBoost Classifier Training Accuracy: ", cat_train_acc)
print("CatBoost Classifier Testing Accuracy: ", cat_test_acc)
print()
print("LGBM Classifier Training Accuracy: ", lgbm_train_acc)
print("LGBM Classifier Testing Accuracy: ", lgbm_test_acc)
print()

"""**Effect on Model's Performance with scaling of data**"""

knn_dict = {'Without scaling' : knn_test_acc, 'With scaling' : scale_knn_test_acc}
dtc_dict = {'Without scaling' : dtc_test_acc, 'With scaling' : scale_dtc_test_acc}
rfc_dict = {'Without scaling' : rfc_test_acc, 'With scaling' : scale_rfc_test_acc}
ada_dict = {'Without scaling' : ada_test_acc, 'With scaling' : scale_ada_test_acc}
gbc_dict = {'Without scaling' : gbc_test_acc, 'With scaling' : scale_gbc_test_acc}
xgb_dict = {'Without scaling' : xgb_test_acc, 'With scaling' : scale_xgb_test_acc}

labels = list(knn_dict.keys())
acc = list(knn_dict.values())

plt.bar(labels, acc, color = ['skyblue', 'orange'])
plt.xlabel('Data')
plt.ylabel('Model Accuracy')
plt.title('KNN Classifier Performance Comparision')

labels = list(dtc_dict.keys())
acc = list(dtc_dict.values())

plt.bar(labels, acc, color = ['skyblue', 'orange'])
plt.xlabel('Data')
plt.ylabel('Model Accuracy')
plt.title('Decision Tree Classifier Performance Comparision')

labels = list(rfc_dict.keys())
acc = list(rfc_dict.values())

plt.bar(labels, acc, color = ['skyblue', 'orange'])
plt.xlabel('Data')
plt.ylabel('Model Accuracy')
plt.title('Random Forest Classifier Performance Comparision')

labels = list(ada_dict.keys())
acc = list(ada_dict.values())

plt.bar(labels, acc, color = ['skyblue', 'orange'])
plt.xlabel('Data')
plt.ylabel('Model Accuracy')
plt.title('AdaBoost Classifier Performance Comparision')

labels = list(gbc_dict.keys())
acc = list(gbc_dict.values())

plt.bar(labels, acc, color = ['skyblue', 'orange'])
plt.xlabel('Data')
plt.ylabel('Model Accuracy')
plt.title('GradientBoost Classifier Performance Comparision')

labels = list(xgb_dict.keys())
acc = list(xgb_dict.values())

plt.bar(labels, acc, color = ['skyblue', 'orange'])
plt.xlabel('Data')
plt.ylabel('Model Accuracy')
plt.title('XGB Classifier Performance Comparision')

Models = ['KNN', 'Decision Tree', 'Random Forest', 'AdaBoost', 'GradientBoost', 'XGB', 'CatBoost', 'LGBM']
Test_Accuracy = [scale_knn_test_acc, scale_dtc_test_acc, scale_rfc_test_acc, scale_ada_test_acc, scale_gbc_test_acc, scale_xgb_test_acc,
            cat_test_acc, lgbm_test_acc]
Train_Accracy = [scale_knn_train_acc, scale_dtc_train_acc, scale_rfc_train_acc, scale_ada_train_acc, scale_gbc_train_acc, scale_xgb_train_acc,
            cat_train_acc, lgbm_train_acc]

plt.figure(figsize = (12, 5))

plt.plot(Models, Test_Accuracy, marker='o', label='Test Accuracy')
plt.plot(Models, Train_Accracy, marker='s', label='Train Accuracy')

plt.xlabel('Machine Learning Models')
plt.ylabel('Accuracy')
plt.title('Models Performance Comparision')
plt.legend()
plt.show()

output = rfc.predict(x_test)

d = {'Actual' : y_test, 'Predicted' : output}
d = pd.DataFrame(d)
print(d)

import pickle

pickle.dump(rfc, open('model.pkl', 'wb'))

model = pickle.load(open('model.pkl','rb'))
print(model.predict(x_test[2].reshape(1,-1)))

